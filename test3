
.data

.globl $object$prototype
$object$prototype:
  .word 0                                  # Type tag for class: object
  .word 3                                  # Object size
  .word $object$dispatchTable              # Pointer to dispatch table
  .align 2

.globl $int$prototype
$int$prototype:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 0                                  # Initial value of attribute: __int__
  .align 2

.globl $bool$prototype
$bool$prototype:
  .word 2                                  # Type tag for class: bool
  .word 4                                  # Object size
  .word $bool$dispatchTable                # Pointer to dispatch table
  .word 0                                  # Initial value of attribute: __bool__
  .align 2

.globl $str$prototype
$str$prototype:
  .word 3                                  # Type tag for class: str
  .word 5                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_2                            # Initial value of attribute: __len__
  .word 0                                  # Initial value of attribute: __str__
  .align 2

.globl $.list$prototype
$.list$prototype:
  .word -1                                 # Type tag for class: .list
  .word 4                                  # Object size
  .word 0                                  # Pointer to dispatch table
  .word const_2                            # Initial value of attribute: __len__
  .align 2

.globl $object$dispatchTable
$object$dispatchTable:
  .word $object.__init__                   # Implementation for method: object.__init__

.globl $int$dispatchTable
$int$dispatchTable:
  .word $object.__init__                   # Implementation for method: int.__init__

.globl $bool$dispatchTable
$bool$dispatchTable:
  .word $object.__init__                   # Implementation for method: bool.__init__

.globl $str$dispatchTable
$str$dispatchTable:
  .word $object.__init__                   # Implementation for method: str.__init__

.text

.globl main
main:
  lui a0, 8192                             # Initialize heap size (in multiples of 4KB)
  add s11, s11, a0                         # Save heap size
  jal heap.init                            # Call heap.init routine
  mv gp, a0                                # Initialize heap pointer
  mv s10, gp                               # Set beginning of heap
  add s11, s10, s11                        # Set end of heap (= start of heap + heap size)
  addi fp, sp, 4                           # New fp is just below stack top
  la a0, const_0                           # Load boolean literal: false
  lw a0, 12(a0)                            # Load attribute: __bool__
  beq a0, zero, label_0                    # Conditional branch
  la a0, const_3                           # Load string literal
  sw a0, -4(fp)                            # Push on stack slot 1
  addi sp, sp, -4                          # Increment stack pointer by 1
  jal $print                               # Invoke function: print
  addi sp, sp, 4                           # Decrement stack pointer by 1
  label_1:                                 # End of program
  li a0, 10                                # Code for ecall: exit
  ecall

.globl $object.__init__
$object.__init__:
  mv a0, zero                              # `None` constant
  jr ra                                    # Return

.globl $print
$print:
  lw a0, 4(sp)                             # Load arg
  beq a0, zero, label_3                    # None is an illegal argument
  lw t0, 0(a0)                             # Get type tag of arg
  li t1, 1                                 # Load type tag of `int`
  beq t0, t1, label_4                      # Go to print(int)
  li t1, 3                                 # Load type tag of `str`
  beq t0, t1, label_5                      # Go to print(str)
  li t1, 2                                 # Load type tag of `bool`
  beq t0, t1, label_6                      # Go to print(bool)
  label_3:                                 # Invalid argument
  li a0, 1                                 # Exit code for: Invalid argument
  la a1, const_4                           # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort
  label_6:                                 # Print bool object in A0
  lw a0, 12(a0)                            # Load attribute __bool__
  beq a0, zero, label_8                    # Go to: print(False)
  la a0, const_5                           # String representation: True
  j label_5                                # Go to: print(str)
  label_8:                                 # Print False object in A0
  la a0, const_6                           # String representation: False
  j label_5                                # Go to: print(str)
  label_5:                                 # Print str object in A0
  addi a1, a0, 16                          # Load address of attribute __str__
  j label_7                                # Print the null-terminated string is now in A1
  mv a0, zero                              # Load None
  j label_2                                # Go to return
  label_4:                                 # Print int object in A0
  lw a1, 12(a0)                            # Load attribute __int__
  li a0, 1                                 # Code for ecall: print_int
  ecall                                    # Print integer
  li a1, 10                                # Load newline character
  li a0, 11                                # Code for ecall: print_char
  ecall                                    # Print character
  mv a0, zero                              # Load None
  j label_2                                # Go to return
  label_7:                                 # Print null-terminated string in A1
  li a0, 4                                 # Code for ecall: print_string
  ecall                                    # Print string
  li a1, 10                                # Load newline character
  li a0, 11                                # Code for ecall: print_char
  ecall                                    # Print character
  mv a0, zero                              # Load None
  label_2:                                 # End of function
  jr ra                                    # Return to caller

.globl $len
$len:
  lw a0, 4(sp)                             # Load arg
  beq a0, zero, label_9                    # None is an illegal argument
  lw t0, 0(a0)                             # Get type tag of arg
  li t1, 3                                 # Load type tag of `str`
  beq t0, t1, label_10                     # Go to len(str)
  li t1, -1                                # Load type tag for list objects
  beq t0, t1, label_11                     # Go to len(list)
  label_9:                                 # Invalid argument
  li a0, 1                                 # Exit code for: Invalid argument
  la a1, const_4                           # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort
  label_10:                                # Get length of string
  lw a0, 12(a0)                            # Load attribute: __len__
  jr ra                                    # Return to caller
  label_11:                                # Get length of list
  lw a0, 12(a0)                            # Load attribute: __len__
  jr ra                                    # Return to caller

.globl $input
$input:
  li a0, 6                                 # Exit code for: Unsupported operation
  la a1, const_7                           # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort

.globl alloc
alloc:
  lw a1, 4(a0)                             # Get size of object in words
  j alloc2                                 # Allocate object with exact size

.globl alloc2
alloc2:
  li a2, 4                                 # Word size in bytes
  mul a2, a1, a2                           # Calculate number of bytes to allocate
  add a2, gp, a2                           # Estimate where GP will move
  bgeu a2, s11, label_12                   # Go to OOM handler if too large
  lw t0, 4(a0)                             # Get size of object in words
  mv t2, a0                                # Initialize src ptr
  mv t3, gp                                # Initialize dest ptr
  label_13:                                # Copy-loop header
  lw t1, 0(t2)                             # Load next word from src
  sw t1, 0(t3)                             # Store next word to dest
  addi t2, t2, 4                           # Increment src
  addi t3, t3, 4                           # Increment dest
  addi t0, t0, -1                          # Decrement counter
  bne t0, zero, label_13                   # Loop if more words left to copy
  mv a0, gp                                # Save new object's address to return
  sw a1, 4(a0)                             # Set size of new object in words (same as requested size)
  mv gp, a2                                # Set next free slot in the heap
  jr ra                                    # Return to caller
  label_12:                                # OOM handler
  li a0, 5                                 # Exit code for: Out of memory
  la a1, const_8                           # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort

.globl abort
abort:
  mv t0, a0                                # Save exit code in temp
  li a0, 4                                 # Code for ecall: print_string
  ecall                                    # Print error message in a1
  li a1, 10                                # Load newline character
  li a0, 11                                # Code for ecall: print_char
  ecall                                    # Print newline
  mv a1, t0                                # Move exit code to a1
  li a0, 17                                # Code for ecall: exit2
  ecall                                    # Exit with code
  label_14:                                # Infinite loop
  j label_14                               # Prevent fallthrough

.globl heap.init
heap.init:
  mv a1, a0                                # Move requested size to A1
  li a0, 9                                 # Code for ecall: sbrk
  ecall                                    # Request A1 bytes
  jr ra                                    # Return to caller

.globl error.None
error.None:
  li a0, 4                                 # Exit code for: Operation on None
  la a1, const_9                           # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort

.globl error.Div
error.Div:
  li a0, 2                                 # Exit code for: Divison by zero
  la a1, const_10                          # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort

.globl error.OOB
error.OOB:
  li a0, 3                                 # Exit code for: Index out of bounds
  la a1, const_11                          # Load error message as str
  addi a1, a1, 16                          # Load address of attribute __str__
  j abort                                  # Abort

.data

.globl const_0
const_0:
  .word 2                                  # Type tag for class: bool
  .word 4                                  # Object size
  .word $bool$dispatchTable                # Pointer to dispatch table
  .word 0                                  # Constant value of attribute: __bool__
  .align 2

.globl const_1
const_1:
  .word 2                                  # Type tag for class: bool
  .word 4                                  # Object size
  .word $bool$dispatchTable                # Pointer to dispatch table
  .word 1                                  # Constant value of attribute: __bool__
  .align 2

.globl const_3
const_3:
  .word 3                                  # Type tag for class: str
  .word 5                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_12                           # Constant value of attribute: __len__
  .string "No"                             # Constant value of attribute: __str__
  .align 2

.globl const_8
const_8:
  .word 3                                  # Type tag for class: str
  .word 8                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_13                           # Constant value of attribute: __len__
  .string "Out of memory"                  # Constant value of attribute: __str__
  .align 2

.globl const_11
const_11:
  .word 3                                  # Type tag for class: str
  .word 9                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_14                           # Constant value of attribute: __len__
  .string "Index out of bounds"            # Constant value of attribute: __str__
  .align 2

.globl const_10
const_10:
  .word 3                                  # Type tag for class: str
  .word 8                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_15                           # Constant value of attribute: __len__
  .string "Divison by zero"                # Constant value of attribute: __str__
  .align 2

.globl const_5
const_5:
  .word 3                                  # Type tag for class: str
  .word 6                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_16                           # Constant value of attribute: __len__
  .string "True"                           # Constant value of attribute: __str__
  .align 2

.globl const_9
const_9:
  .word 3                                  # Type tag for class: str
  .word 9                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_17                           # Constant value of attribute: __len__
  .string "Operation on None"              # Constant value of attribute: __str__
  .align 2

.globl const_4
const_4:
  .word 3                                  # Type tag for class: str
  .word 9                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_18                           # Constant value of attribute: __len__
  .string "Invalid argument"               # Constant value of attribute: __str__
  .align 2

.globl const_7
const_7:
  .word 3                                  # Type tag for class: str
  .word 10                                 # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_19                           # Constant value of attribute: __len__
  .string "Unsupported operation"          # Constant value of attribute: __str__
  .align 2

.globl const_6
const_6:
  .word 3                                  # Type tag for class: str
  .word 6                                  # Object size
  .word $str$dispatchTable                 # Pointer to dispatch table
  .word const_20                           # Constant value of attribute: __len__
  .string "False"                          # Constant value of attribute: __str__
  .align 2

.globl const_2
const_2:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 0                                  # Constant value of attribute: __int__
  .align 2

.globl const_18
const_18:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 16                                 # Constant value of attribute: __int__
  .align 2

.globl const_17
const_17:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 17                                 # Constant value of attribute: __int__
  .align 2

.globl const_12
const_12:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 2                                  # Constant value of attribute: __int__
  .align 2

.globl const_14
const_14:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 19                                 # Constant value of attribute: __int__
  .align 2

.globl const_16
const_16:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 4                                  # Constant value of attribute: __int__
  .align 2

.globl const_19
const_19:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 21                                 # Constant value of attribute: __int__
  .align 2

.globl const_20
const_20:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 5                                  # Constant value of attribute: __int__
  .align 2

.globl const_13
const_13:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 13                                 # Constant value of attribute: __int__
  .align 2

.globl const_15
const_15:
  .word 1                                  # Type tag for class: int
  .word 4                                  # Object size
  .word $int$dispatchTable                 # Pointer to dispatch table
  .word 15                                 # Constant value of attribute: __int__
  .align 2


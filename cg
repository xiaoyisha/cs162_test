   // e 在内部的情况，需要处理 p 所在的三角片， p 为 e 的对称边
    if(p != NULL){

        v->pos = v->newPos = newVertexPosition[e];

        // update pair
        p->pair = vOut;
        vOut->pair = p;

        HalfEdge * prev = p->prev;
        HalfEdge * next = p->next;


        // 新建三条半边

        // 这条边将成为 p 的新 next
        HalfEdge * pNext = new HalfEdge();

        // 这条边是从 v 发出的半边
        HalfEdge * vOut = new HalfEdge();

        // 这条边是指向 v 的半边
        HalfEdge * vIn = new HalfEdge();

        // 新建一个面
        Face * vFace = new Face();

/****************************** 更新拓扑数据 ***********************************/
        /******** face A *******/
        // edge
        p->next = pNext;

        pNext->old = false;
        pNext->origin = v;
        // isa
        pNext->pair = vIn;
        pNext->prev = p;
        pNext->next = prev;
        pNext->face = p->face;
        // isa

        prev->prev = pNext;

        // vertex

        // face
        p->face->edge = p;

        /******** face A *******/

        /******** face B *******/
        // edge
        vOut->old = true;
        vOut->origin = v;
        // isa
        vOut->pair = NULL;
        vOut->prev = vIn;
        vOut->next = next;
        vOut->face = vFace;


        next->next = vIn;
        next->face = vFace;

        vIn->pair = pNext;
        vIn->prev = next;
        vIn->next = vOut;
        vIn->face = vFace;

        // isa

        next->prev = vOut;


        vIn->old = false;
        vIn->origin = prev->origin;


        // vertex
        v->edge = pNext;

        // face
        vFace->edge = vOut;
        /******** face B *******/


/****************************** 更新拓扑数据 ***********************************/


        halfEdges.push_back(pNext);
        halfEdges.push_back(vOut);
        halfEdges.push_back(vIn);
        faces.push_back(vFace);

        // update pair
        e->pair = vOut;
        vOut->pair = e;
        
